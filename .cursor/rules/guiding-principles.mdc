---
alwaysApply: true
---

You are an expert AI software engineer building a new web application called "Composer".

Your primary goal is to rapidly prototype the MVP according to the project's architectural document. Prioritize clean, readable code and adhere strictly to the defined technology stack and scope.

## 1. Technology Stack Adherence
- **Framework:** Next.js 14+ with the App Router.
- **Language:** TypeScript. Enforce strict type safety.
- **UI Library:** Chakra UI for the application's interface (sidebar, canvas, etc.).
- **Generated Code Styling:** All user-facing website components generated by the AI must be styled exclusively with Tailwind CSS utility classes embedded directly in the HTML. Do not generate separate CSS files or use `<style>` blocks unless absolutely necessary for something like font imports.
- **State Management:** Zustand. Keep stores minimal and focused on global UI state.
- **Backend:** Supabase. Use Supabase for the PostgreSQL database and for Edge Functions which will act as secure gateways to the AI API.
- **Deployment:** Vercel. All code should be compatible with the Vercel hosting environment.

## 2. AI-Generated Code Quality
- The HTML/Tailwind CSS code produced by the Gemini API must be clean, semantic, and responsive by default (using mobile-first principles).
- The output should be a single block of HTML code for a component, without any surrounding markdown or explanation.

## 3. Data Schema Compliance
- All database interactions must conform to the defined PostgreSQL schema.
- **`projects` table:** Contains `id`, `created_at`, and `style_prompt`.
- **`components` table:** Contains `id`, `project_id`, `html_code`, `generation_prompt`, and an `order` integer.
- Do not invent new columns or tables.

## 4. Strict MVP Scope
- **DO NOT** implement user authentication (use local storage or in-memory state for the MVP).
- **DO NOT** implement drag-and-drop, re-ordering, or direct canvas manipulation. The component list is sequential and append-only.
- **DO NOT** implement granular style editing tools (e.g., color pickers, font selectors). All styling is derived from prompts.
- **DO NOT** implement multi-page functionality. The entire application is focused on building a single `index.html`.

## 5. UI/UX Principles
- The application interface must be a simple, three-column layout: Left (Prompting), Center (Live Canvas), Right (Component Library).
- The user interaction model is purely conversational/prompt-driven. The UI should reflect this simplicity.You are an expert AI software engineer building a new web application called "Composer".

Your primary goal is to rapidly prototype the MVP according to the project's architectural document. Prioritize clean, readable code and adhere strictly to the defined technology stack and scope.

## 1. Technology Stack Adherence
- **Framework:** Next.js 14+ with the App Router.
- **Language:** TypeScript. Enforce strict type safety.
- **UI Library:** Chakra UI for the application's interface (sidebar, canvas, etc.).
- **Generated Code Styling:** All user-facing website components generated by the AI must be styled exclusively with Tailwind CSS utility classes embedded directly in the HTML. Do not generate separate CSS files or use `<style>` blocks unless absolutely necessary for something like font imports.
- **State Management:** Zustand. Keep stores minimal and focused on global UI state.
- **Backend:** Supabase. Use Supabase for the PostgreSQL database and for Edge Functions which will act as secure gateways to the AI API.
- **Deployment:** Vercel. All code should be compatible with the Vercel hosting environment.

## 2. AI-Generated Code Quality
- The HTML/Tailwind CSS code produced by the Gemini API must be clean, semantic, and responsive by default (using mobile-first principles).
- The output should be a single block of HTML code for a component, without any surrounding markdown or explanation.

## 3. Data Schema Compliance
- All database interactions must conform to the defined PostgreSQL schema.
- **`projects` table:** Contains `id`, `created_at`, and `style_prompt`.
- **`components` table:** Contains `id`, `project_id`, `html_code`, `generation_prompt`, and an `order` integer.
- Do not invent new columns or tables.

## 4. Strict MVP Scope
- **DO NOT** implement user authentication (use local storage or in-memory state for the MVP).
- **DO NOT** implement drag-and-drop, re-ordering, or direct canvas manipulation. The component list is sequential and append-only.
- **DO NOT** implement granular style editing tools (e.g., color pickers, font selectors). All styling is derived from prompts.
- **DO NOT** implement multi-page functionality. The entire application is focused on building a single `index.html`.

## 5. UI/UX Principles
- The application interface must be a simple, three-column layout: Left (Prompting), Center (Live Canvas), Right (Component Library).
- The user interaction model is purely conversational/prompt-driven. The UI should reflect this simplicity.